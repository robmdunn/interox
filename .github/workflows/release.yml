name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: interox-x86_64-linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: interox-aarch64-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: interox-x86_64-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: interox-aarch64-macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: interox-x86_64-windows.exe

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            sudo apt-get install -y libssl-dev:arm64
            # Create pkg-config wrapper for cross-compilation
            cat > aarch64-linux-gnu-pkg-config << 'EOF'
            #!/bin/sh
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
            export PKG_CONFIG_ALLOW_CROSS=1
            pkg-config "$@"
            EOF
            chmod +x aarch64-linux-gnu-pkg-config
            sudo mv aarch64-linux-gnu-pkg-config /usr/local/bin/
            # Set environment variables for cross-compilation
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "OPENSSL_DIR=/usr/include/aarch64-linux-gnu" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          fi

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/interox.exe" "${{ matrix.asset_name }}"
          else
            cp "target/${{ matrix.target }}/release/interox" "${{ matrix.asset_name }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            interox-x86_64-linux
            interox-aarch64-linux
            interox-x86_64-macos
            interox-aarch64-macos
            interox-x86_64-windows.exe
          generate_release_notes: true